{"version":3,"file":"index.esm.js","sources":["../node_modules/cuint/lib/uint32.js","../node_modules/cuint/lib/uint64.js","../node_modules/cuint/index.js","../node_modules/xxhashjs/lib/xxhash.js","../node_modules/xxhashjs/lib/xxhash64.js","../node_modules/xxhashjs/lib/index.js","../node_modules/fast-json-stable-stringify/index.js","../src/dopeHash.ts","../src/dopeMap.ts"],"sourcesContent":["/**\n\tC-like unsigned 32 bits integers in Javascript\n\tCopyright (C) 2013, Pierre Curto\n\tMIT license\n */\n;(function (root) {\n\n\t// Local cache for typical radices\n\tvar radixPowerCache = {\n\t\t36: UINT32( Math.pow(36, 5) )\n\t,\t16: UINT32( Math.pow(16, 7) )\n\t,\t10: UINT32( Math.pow(10, 9) )\n\t,\t2:  UINT32( Math.pow(2, 30) )\n\t}\n\tvar radixCache = {\n\t\t36: UINT32(36)\n\t,\t16: UINT32(16)\n\t,\t10: UINT32(10)\n\t,\t2:  UINT32(2)\n\t}\n\n\t/**\n\t *\tRepresents an unsigned 32 bits integer\n\t * @constructor\n\t * @param {Number|String|Number} low bits     | integer as a string \t\t | integer as a number\n\t * @param {Number|Number|Undefined} high bits | radix (optional, default=10)\n\t * @return \n\t */\n\tfunction UINT32 (l, h) {\n\t\tif ( !(this instanceof UINT32) )\n\t\t\treturn new UINT32(l, h)\n\n\t\tthis._low = 0\n\t\tthis._high = 0\n\t\tthis.remainder = null\n\t\tif (typeof h == 'undefined')\n\t\t\treturn fromNumber.call(this, l)\n\n\t\tif (typeof l == 'string')\n\t\t\treturn fromString.call(this, l, h)\n\n\t\tfromBits.call(this, l, h)\n\t}\n\n\t/**\n\t * Set the current _UINT32_ object with its low and high bits\n\t * @method fromBits\n\t * @param {Number} low bits\n\t * @param {Number} high bits\n\t * @return ThisExpression\n\t */\n\tfunction fromBits (l, h) {\n\t\tthis._low = l | 0\n\t\tthis._high = h | 0\n\n\t\treturn this\n\t}\n\tUINT32.prototype.fromBits = fromBits\n\n\t/**\n\t * Set the current _UINT32_ object from a number\n\t * @method fromNumber\n\t * @param {Number} number\n\t * @return ThisExpression\n\t */\n\tfunction fromNumber (value) {\n\t\tthis._low = value & 0xFFFF\n\t\tthis._high = value >>> 16\n\n\t\treturn this\n\t}\n\tUINT32.prototype.fromNumber = fromNumber\n\n\t/**\n\t * Set the current _UINT32_ object from a string\n\t * @method fromString\n\t * @param {String} integer as a string\n\t * @param {Number} radix (optional, default=10)\n\t * @return ThisExpression\n\t */\n\tfunction fromString (s, radix) {\n\t\tvar value = parseInt(s, radix || 10)\n\n\t\tthis._low = value & 0xFFFF\n\t\tthis._high = value >>> 16\n\n\t\treturn this\n\t}\n\tUINT32.prototype.fromString = fromString\n\n\t/**\n\t * Convert this _UINT32_ to a number\n\t * @method toNumber\n\t * @return {Number} the converted UINT32\n\t */\n\tUINT32.prototype.toNumber = function () {\n\t\treturn (this._high * 65536) + this._low\n\t}\n\n\t/**\n\t * Convert this _UINT32_ to a string\n\t * @method toString\n\t * @param {Number} radix (optional, default=10)\n\t * @return {String} the converted UINT32\n\t */\n\tUINT32.prototype.toString = function (radix) {\n\t\treturn this.toNumber().toString(radix || 10)\n\t}\n\n\t/**\n\t * Add two _UINT32_. The current _UINT32_ stores the result\n\t * @method add\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.add = function (other) {\n\t\tvar a00 = this._low + other._low\n\t\tvar a16 = a00 >>> 16\n\n\t\ta16 += this._high + other._high\n\n\t\tthis._low = a00 & 0xFFFF\n\t\tthis._high = a16 & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Subtract two _UINT32_. The current _UINT32_ stores the result\n\t * @method subtract\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.subtract = function (other) {\n\t\t//TODO inline\n\t\treturn this.add( other.clone().negate() )\n\t}\n\n\t/**\n\t * Multiply two _UINT32_. The current _UINT32_ stores the result\n\t * @method multiply\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.multiply = function (other) {\n\t\t/*\n\t\t\ta = a00 + a16\n\t\t\tb = b00 + b16\n\t\t\ta*b = (a00 + a16)(b00 + b16)\n\t\t\t\t= a00b00 + a00b16 + a16b00 + a16b16\n\n\t\t\ta16b16 overflows the 32bits\n\t\t */\n\t\tvar a16 = this._high\n\t\tvar a00 = this._low\n\t\tvar b16 = other._high\n\t\tvar b00 = other._low\n\n/* Removed to increase speed under normal circumstances (i.e. not multiplying by 0 or 1)\n\t\t// this == 0 or other == 1: nothing to do\n\t\tif ((a00 == 0 && a16 == 0) || (b00 == 1 && b16 == 0)) return this\n\n\t\t// other == 0 or this == 1: this = other\n\t\tif ((b00 == 0 && b16 == 0) || (a00 == 1 && a16 == 0)) {\n\t\t\tthis._low = other._low\n\t\t\tthis._high = other._high\n\t\t\treturn this\n\t\t}\n*/\n\n\t\tvar c16, c00\n\t\tc00 = a00 * b00\n\t\tc16 = c00 >>> 16\n\n\t\tc16 += a16 * b00\n\t\tc16 &= 0xFFFF\t\t// Not required but improves performance\n\t\tc16 += a00 * b16\n\n\t\tthis._low = c00 & 0xFFFF\n\t\tthis._high = c16 & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Divide two _UINT32_. The current _UINT32_ stores the result.\n\t * The remainder is made available as the _remainder_ property on\n\t * the _UINT32_ object. It can be null, meaning there are no remainder.\n\t * @method div\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.div = function (other) {\n\t\tif ( (other._low == 0) && (other._high == 0) ) throw Error('division by zero')\n\n\t\t// other == 1\n\t\tif (other._high == 0 && other._low == 1) {\n\t\t\tthis.remainder = new UINT32(0)\n\t\t\treturn this\n\t\t}\n\n\t\t// other > this: 0\n\t\tif ( other.gt(this) ) {\n\t\t\tthis.remainder = this.clone()\n\t\t\tthis._low = 0\n\t\t\tthis._high = 0\n\t\t\treturn this\n\t\t}\n\t\t// other == this: 1\n\t\tif ( this.eq(other) ) {\n\t\t\tthis.remainder = new UINT32(0)\n\t\t\tthis._low = 1\n\t\t\tthis._high = 0\n\t\t\treturn this\n\t\t}\n\n\t\t// Shift the divisor left until it is higher than the dividend\n\t\tvar _other = other.clone()\n\t\tvar i = -1\n\t\twhile ( !this.lt(_other) ) {\n\t\t\t// High bit can overflow the default 16bits\n\t\t\t// Its ok since we right shift after this loop\n\t\t\t// The overflown bit must be kept though\n\t\t\t_other.shiftLeft(1, true)\n\t\t\ti++\n\t\t}\n\n\t\t// Set the remainder\n\t\tthis.remainder = this.clone()\n\t\t// Initialize the current result to 0\n\t\tthis._low = 0\n\t\tthis._high = 0\n\t\tfor (; i >= 0; i--) {\n\t\t\t_other.shiftRight(1)\n\t\t\t// If shifted divisor is smaller than the dividend\n\t\t\t// then subtract it from the dividend\n\t\t\tif ( !this.remainder.lt(_other) ) {\n\t\t\t\tthis.remainder.subtract(_other)\n\t\t\t\t// Update the current result\n\t\t\t\tif (i >= 16) {\n\t\t\t\t\tthis._high |= 1 << (i - 16)\n\t\t\t\t} else {\n\t\t\t\t\tthis._low |= 1 << i\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Negate the current _UINT32_\n\t * @method negate\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.negate = function () {\n\t\tvar v = ( ~this._low & 0xFFFF ) + 1\n\t\tthis._low = v & 0xFFFF\n\t\tthis._high = (~this._high + (v >>> 16)) & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Equals\n\t * @method eq\n\t * @param {Object} other UINT32\n\t * @return {Boolean}\n\t */\n\tUINT32.prototype.equals = UINT32.prototype.eq = function (other) {\n\t\treturn (this._low == other._low) && (this._high == other._high)\n\t}\n\n\t/**\n\t * Greater than (strict)\n\t * @method gt\n\t * @param {Object} other UINT32\n\t * @return {Boolean}\n\t */\n\tUINT32.prototype.greaterThan = UINT32.prototype.gt = function (other) {\n\t\tif (this._high > other._high) return true\n\t\tif (this._high < other._high) return false\n\t\treturn this._low > other._low\n\t}\n\n\t/**\n\t * Less than (strict)\n\t * @method lt\n\t * @param {Object} other UINT32\n\t * @return {Boolean}\n\t */\n\tUINT32.prototype.lessThan = UINT32.prototype.lt = function (other) {\n\t\tif (this._high < other._high) return true\n\t\tif (this._high > other._high) return false\n\t\treturn this._low < other._low\n\t}\n\n\t/**\n\t * Bitwise OR\n\t * @method or\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.or = function (other) {\n\t\tthis._low |= other._low\n\t\tthis._high |= other._high\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise AND\n\t * @method and\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.and = function (other) {\n\t\tthis._low &= other._low\n\t\tthis._high &= other._high\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise NOT\n\t * @method not\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.not = function() {\n\t\tthis._low = ~this._low & 0xFFFF\n\t\tthis._high = ~this._high & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise XOR\n\t * @method xor\n\t * @param {Object} other UINT32\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.xor = function (other) {\n\t\tthis._low ^= other._low\n\t\tthis._high ^= other._high\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise shift right\n\t * @method shiftRight\n\t * @param {Number} number of bits to shift\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.shiftRight = UINT32.prototype.shiftr = function (n) {\n\t\tif (n > 16) {\n\t\t\tthis._low = this._high >> (n - 16)\n\t\t\tthis._high = 0\n\t\t} else if (n == 16) {\n\t\t\tthis._low = this._high\n\t\t\tthis._high = 0\n\t\t} else {\n\t\t\tthis._low = (this._low >> n) | ( (this._high << (16-n)) & 0xFFFF )\n\t\t\tthis._high >>= n\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise shift left\n\t * @method shiftLeft\n\t * @param {Number} number of bits to shift\n\t * @param {Boolean} allow overflow\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.shiftLeft = UINT32.prototype.shiftl = function (n, allowOverflow) {\n\t\tif (n > 16) {\n\t\t\tthis._high = this._low << (n - 16)\n\t\t\tthis._low = 0\n\t\t\tif (!allowOverflow) {\n\t\t\t\tthis._high &= 0xFFFF\n\t\t\t}\n\t\t} else if (n == 16) {\n\t\t\tthis._high = this._low\n\t\t\tthis._low = 0\n\t\t} else {\n\t\t\tthis._high = (this._high << n) | (this._low >> (16-n))\n\t\t\tthis._low = (this._low << n) & 0xFFFF\n\t\t\tif (!allowOverflow) {\n\t\t\t\t// Overflow only allowed on the high bits...\n\t\t\t\tthis._high &= 0xFFFF\n\t\t\t}\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise rotate left\n\t * @method rotl\n\t * @param {Number} number of bits to rotate\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.rotateLeft = UINT32.prototype.rotl = function (n) {\n\t\tvar v = (this._high << 16) | this._low\n\t\tv = (v << n) | (v >>> (32 - n))\n\t\tthis._low = v & 0xFFFF\n\t\tthis._high = v >>> 16\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise rotate right\n\t * @method rotr\n\t * @param {Number} number of bits to rotate\n\t * @return ThisExpression\n\t */\n\tUINT32.prototype.rotateRight = UINT32.prototype.rotr = function (n) {\n\t\tvar v = (this._high << 16) | this._low\n\t\tv = (v >>> n) | (v << (32 - n))\n\t\tthis._low = v & 0xFFFF\n\t\tthis._high = v >>> 16\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Clone the current _UINT32_\n\t * @method clone\n\t * @return {Object} cloned UINT32\n\t */\n\tUINT32.prototype.clone = function () {\n\t\treturn new UINT32(this._low, this._high)\n\t}\n\n\tif (typeof define != 'undefined' && define.amd) {\n\t\t// AMD / RequireJS\n\t\tdefine([], function () {\n\t\t\treturn UINT32\n\t\t})\n\t} else if (typeof module != 'undefined' && module.exports) {\n\t\t// Node.js\n\t\tmodule.exports = UINT32\n\t} else {\n\t\t// Browser\n\t\troot['UINT32'] = UINT32\n\t}\n\n})(this)\n","/**\n\tC-like unsigned 64 bits integers in Javascript\n\tCopyright (C) 2013, Pierre Curto\n\tMIT license\n */\n;(function (root) {\n\n\t// Local cache for typical radices\n\tvar radixPowerCache = {\n\t\t16: UINT64( Math.pow(16, 5) )\n\t,\t10: UINT64( Math.pow(10, 5) )\n\t,\t2:  UINT64( Math.pow(2, 5) )\n\t}\n\tvar radixCache = {\n\t\t16: UINT64(16)\n\t,\t10: UINT64(10)\n\t,\t2:  UINT64(2)\n\t}\n\n\t/**\n\t *\tRepresents an unsigned 64 bits integer\n\t * @constructor\n\t * @param {Number} first low bits (8)\n\t * @param {Number} second low bits (8)\n\t * @param {Number} first high bits (8)\n\t * @param {Number} second high bits (8)\n\t * or\n\t * @param {Number} low bits (32)\n\t * @param {Number} high bits (32)\n\t * or\n\t * @param {String|Number} integer as a string \t\t | integer as a number\n\t * @param {Number|Undefined} radix (optional, default=10)\n\t * @return \n\t */\n\tfunction UINT64 (a00, a16, a32, a48) {\n\t\tif ( !(this instanceof UINT64) )\n\t\t\treturn new UINT64(a00, a16, a32, a48)\n\n\t\tthis.remainder = null\n\t\tif (typeof a00 == 'string')\n\t\t\treturn fromString.call(this, a00, a16)\n\n\t\tif (typeof a16 == 'undefined')\n\t\t\treturn fromNumber.call(this, a00)\n\n\t\tfromBits.apply(this, arguments)\n\t}\n\n\t/**\n\t * Set the current _UINT64_ object with its low and high bits\n\t * @method fromBits\n\t * @param {Number} first low bits (8)\n\t * @param {Number} second low bits (8)\n\t * @param {Number} first high bits (8)\n\t * @param {Number} second high bits (8)\n\t * or\n\t * @param {Number} low bits (32)\n\t * @param {Number} high bits (32)\n\t * @return ThisExpression\n\t */\n\tfunction fromBits (a00, a16, a32, a48) {\n\t\tif (typeof a32 == 'undefined') {\n\t\t\tthis._a00 = a00 & 0xFFFF\n\t\t\tthis._a16 = a00 >>> 16\n\t\t\tthis._a32 = a16 & 0xFFFF\n\t\t\tthis._a48 = a16 >>> 16\n\t\t\treturn this\n\t\t}\n\n\t\tthis._a00 = a00 | 0\n\t\tthis._a16 = a16 | 0\n\t\tthis._a32 = a32 | 0\n\t\tthis._a48 = a48 | 0\n\n\t\treturn this\n\t}\n\tUINT64.prototype.fromBits = fromBits\n\n\t/**\n\t * Set the current _UINT64_ object from a number\n\t * @method fromNumber\n\t * @param {Number} number\n\t * @return ThisExpression\n\t */\n\tfunction fromNumber (value) {\n\t\tthis._a00 = value & 0xFFFF\n\t\tthis._a16 = value >>> 16\n\t\tthis._a32 = 0\n\t\tthis._a48 = 0\n\n\t\treturn this\n\t}\n\tUINT64.prototype.fromNumber = fromNumber\n\n\t/**\n\t * Set the current _UINT64_ object from a string\n\t * @method fromString\n\t * @param {String} integer as a string\n\t * @param {Number} radix (optional, default=10)\n\t * @return ThisExpression\n\t */\n\tfunction fromString (s, radix) {\n\t\tradix = radix || 10\n\n\t\tthis._a00 = 0\n\t\tthis._a16 = 0\n\t\tthis._a32 = 0\n\t\tthis._a48 = 0\n\n\t\t/*\n\t\t\tIn Javascript, bitwise operators only operate on the first 32 bits \n\t\t\tof a number, even though parseInt() encodes numbers with a 53 bits \n\t\t\tmantissa.\n\t\t\tTherefore UINT64(<Number>) can only work on 32 bits.\n\t\t\tThe radix maximum value is 36 (as per ECMA specs) (26 letters + 10 digits)\n\t\t\tmaximum input value is m = 32bits as 1 = 2^32 - 1\n\t\t\tSo the maximum substring length n is:\n\t\t\t36^(n+1) - 1 = 2^32 - 1\n\t\t\t36^(n+1) = 2^32\n\t\t\t(n+1)ln(36) = 32ln(2)\n\t\t\tn = 32ln(2)/ln(36) - 1\n\t\t\tn = 5.189644915687692\n\t\t\tn = 5\n\t\t */\n\t\tvar radixUint = radixPowerCache[radix] || new UINT64( Math.pow(radix, 5) )\n\n\t\tfor (var i = 0, len = s.length; i < len; i += 5) {\n\t\t\tvar size = Math.min(5, len - i)\n\t\t\tvar value = parseInt( s.slice(i, i + size), radix )\n\t\t\tthis.multiply(\n\t\t\t\t\tsize < 5\n\t\t\t\t\t\t? new UINT64( Math.pow(radix, size) )\n\t\t\t\t\t\t: radixUint\n\t\t\t\t)\n\t\t\t\t.add( new UINT64(value) )\n\t\t}\n\n\t\treturn this\n\t}\n\tUINT64.prototype.fromString = fromString\n\n\t/**\n\t * Convert this _UINT64_ to a number (last 32 bits are dropped)\n\t * @method toNumber\n\t * @return {Number} the converted UINT64\n\t */\n\tUINT64.prototype.toNumber = function () {\n\t\treturn (this._a16 * 65536) + this._a00\n\t}\n\n\t/**\n\t * Convert this _UINT64_ to a string\n\t * @method toString\n\t * @param {Number} radix (optional, default=10)\n\t * @return {String} the converted UINT64\n\t */\n\tUINT64.prototype.toString = function (radix) {\n\t\tradix = radix || 10\n\t\tvar radixUint = radixCache[radix] || new UINT64(radix)\n\n\t\tif ( !this.gt(radixUint) ) return this.toNumber().toString(radix)\n\n\t\tvar self = this.clone()\n\t\tvar res = new Array(64)\n\t\tfor (var i = 63; i >= 0; i--) {\n\t\t\tself.div(radixUint)\n\t\t\tres[i] = self.remainder.toNumber().toString(radix)\n\t\t\tif ( !self.gt(radixUint) ) break\n\t\t}\n\t\tres[i-1] = self.toNumber().toString(radix)\n\n\t\treturn res.join('')\n\t}\n\n\t/**\n\t * Add two _UINT64_. The current _UINT64_ stores the result\n\t * @method add\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.add = function (other) {\n\t\tvar a00 = this._a00 + other._a00\n\n\t\tvar a16 = a00 >>> 16\n\t\ta16 += this._a16 + other._a16\n\n\t\tvar a32 = a16 >>> 16\n\t\ta32 += this._a32 + other._a32\n\n\t\tvar a48 = a32 >>> 16\n\t\ta48 += this._a48 + other._a48\n\n\t\tthis._a00 = a00 & 0xFFFF\n\t\tthis._a16 = a16 & 0xFFFF\n\t\tthis._a32 = a32 & 0xFFFF\n\t\tthis._a48 = a48 & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Subtract two _UINT64_. The current _UINT64_ stores the result\n\t * @method subtract\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.subtract = function (other) {\n\t\treturn this.add( other.clone().negate() )\n\t}\n\n\t/**\n\t * Multiply two _UINT64_. The current _UINT64_ stores the result\n\t * @method multiply\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.multiply = function (other) {\n\t\t/*\n\t\t\ta = a00 + a16 + a32 + a48\n\t\t\tb = b00 + b16 + b32 + b48\n\t\t\ta*b = (a00 + a16 + a32 + a48)(b00 + b16 + b32 + b48)\n\t\t\t\t= a00b00 + a00b16 + a00b32 + a00b48\n\t\t\t\t+ a16b00 + a16b16 + a16b32 + a16b48\n\t\t\t\t+ a32b00 + a32b16 + a32b32 + a32b48\n\t\t\t\t+ a48b00 + a48b16 + a48b32 + a48b48\n\n\t\t\ta16b48, a32b32, a48b16, a48b32 and a48b48 overflow the 64 bits\n\t\t\tso it comes down to:\n\t\t\ta*b\t= a00b00 + a00b16 + a00b32 + a00b48\n\t\t\t\t+ a16b00 + a16b16 + a16b32\n\t\t\t\t+ a32b00 + a32b16\n\t\t\t\t+ a48b00\n\t\t\t\t= a00b00\n\t\t\t\t+ a00b16 + a16b00\n\t\t\t\t+ a00b32 + a16b16 + a32b00\n\t\t\t\t+ a00b48 + a16b32 + a32b16 + a48b00\n\t\t */\n\t\tvar a00 = this._a00\n\t\tvar a16 = this._a16\n\t\tvar a32 = this._a32\n\t\tvar a48 = this._a48\n\t\tvar b00 = other._a00\n\t\tvar b16 = other._a16\n\t\tvar b32 = other._a32\n\t\tvar b48 = other._a48\n\n\t\tvar c00 = a00 * b00\n\n\t\tvar c16 = c00 >>> 16\n\t\tc16 += a00 * b16\n\t\tvar c32 = c16 >>> 16\n\t\tc16 &= 0xFFFF\n\t\tc16 += a16 * b00\n\n\t\tc32 += c16 >>> 16\n\t\tc32 += a00 * b32\n\t\tvar c48 = c32 >>> 16\n\t\tc32 &= 0xFFFF\n\t\tc32 += a16 * b16\n\t\tc48 += c32 >>> 16\n\t\tc32 &= 0xFFFF\n\t\tc32 += a32 * b00\n\n\t\tc48 += c32 >>> 16\n\t\tc48 += a00 * b48\n\t\tc48 &= 0xFFFF\n\t\tc48 += a16 * b32\n\t\tc48 &= 0xFFFF\n\t\tc48 += a32 * b16\n\t\tc48 &= 0xFFFF\n\t\tc48 += a48 * b00\n\n\t\tthis._a00 = c00 & 0xFFFF\n\t\tthis._a16 = c16 & 0xFFFF\n\t\tthis._a32 = c32 & 0xFFFF\n\t\tthis._a48 = c48 & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Divide two _UINT64_. The current _UINT64_ stores the result.\n\t * The remainder is made available as the _remainder_ property on\n\t * the _UINT64_ object. It can be null, meaning there are no remainder.\n\t * @method div\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.div = function (other) {\n\t\tif ( (other._a16 == 0) && (other._a32 == 0) && (other._a48 == 0) ) {\n\t\t\tif (other._a00 == 0) throw Error('division by zero')\n\n\t\t\t// other == 1: this\n\t\t\tif (other._a00 == 1) {\n\t\t\t\tthis.remainder = new UINT64(0)\n\t\t\t\treturn this\n\t\t\t}\n\t\t}\n\n\t\t// other > this: 0\n\t\tif ( other.gt(this) ) {\n\t\t\tthis.remainder = this.clone()\n\t\t\tthis._a00 = 0\n\t\t\tthis._a16 = 0\n\t\t\tthis._a32 = 0\n\t\t\tthis._a48 = 0\n\t\t\treturn this\n\t\t}\n\t\t// other == this: 1\n\t\tif ( this.eq(other) ) {\n\t\t\tthis.remainder = new UINT64(0)\n\t\t\tthis._a00 = 1\n\t\t\tthis._a16 = 0\n\t\t\tthis._a32 = 0\n\t\t\tthis._a48 = 0\n\t\t\treturn this\n\t\t}\n\n\t\t// Shift the divisor left until it is higher than the dividend\n\t\tvar _other = other.clone()\n\t\tvar i = -1\n\t\twhile ( !this.lt(_other) ) {\n\t\t\t// High bit can overflow the default 16bits\n\t\t\t// Its ok since we right shift after this loop\n\t\t\t// The overflown bit must be kept though\n\t\t\t_other.shiftLeft(1, true)\n\t\t\ti++\n\t\t}\n\n\t\t// Set the remainder\n\t\tthis.remainder = this.clone()\n\t\t// Initialize the current result to 0\n\t\tthis._a00 = 0\n\t\tthis._a16 = 0\n\t\tthis._a32 = 0\n\t\tthis._a48 = 0\n\t\tfor (; i >= 0; i--) {\n\t\t\t_other.shiftRight(1)\n\t\t\t// If shifted divisor is smaller than the dividend\n\t\t\t// then subtract it from the dividend\n\t\t\tif ( !this.remainder.lt(_other) ) {\n\t\t\t\tthis.remainder.subtract(_other)\n\t\t\t\t// Update the current result\n\t\t\t\tif (i >= 48) {\n\t\t\t\t\tthis._a48 |= 1 << (i - 48)\n\t\t\t\t} else if (i >= 32) {\n\t\t\t\t\tthis._a32 |= 1 << (i - 32)\n\t\t\t\t} else if (i >= 16) {\n\t\t\t\t\tthis._a16 |= 1 << (i - 16)\n\t\t\t\t} else {\n\t\t\t\t\tthis._a00 |= 1 << i\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Negate the current _UINT64_\n\t * @method negate\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.negate = function () {\n\t\tvar v = ( ~this._a00 & 0xFFFF ) + 1\n\t\tthis._a00 = v & 0xFFFF\n\t\tv = (~this._a16 & 0xFFFF) + (v >>> 16)\n\t\tthis._a16 = v & 0xFFFF\n\t\tv = (~this._a32 & 0xFFFF) + (v >>> 16)\n\t\tthis._a32 = v & 0xFFFF\n\t\tthis._a48 = (~this._a48 + (v >>> 16)) & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\n\t * @method eq\n\t * @param {Object} other UINT64\n\t * @return {Boolean}\n\t */\n\tUINT64.prototype.equals = UINT64.prototype.eq = function (other) {\n\t\treturn (this._a48 == other._a48) && (this._a00 == other._a00)\n\t\t\t && (this._a32 == other._a32) && (this._a16 == other._a16)\n\t}\n\n\t/**\n\t * Greater than (strict)\n\t * @method gt\n\t * @param {Object} other UINT64\n\t * @return {Boolean}\n\t */\n\tUINT64.prototype.greaterThan = UINT64.prototype.gt = function (other) {\n\t\tif (this._a48 > other._a48) return true\n\t\tif (this._a48 < other._a48) return false\n\t\tif (this._a32 > other._a32) return true\n\t\tif (this._a32 < other._a32) return false\n\t\tif (this._a16 > other._a16) return true\n\t\tif (this._a16 < other._a16) return false\n\t\treturn this._a00 > other._a00\n\t}\n\n\t/**\n\t * Less than (strict)\n\t * @method lt\n\t * @param {Object} other UINT64\n\t * @return {Boolean}\n\t */\n\tUINT64.prototype.lessThan = UINT64.prototype.lt = function (other) {\n\t\tif (this._a48 < other._a48) return true\n\t\tif (this._a48 > other._a48) return false\n\t\tif (this._a32 < other._a32) return true\n\t\tif (this._a32 > other._a32) return false\n\t\tif (this._a16 < other._a16) return true\n\t\tif (this._a16 > other._a16) return false\n\t\treturn this._a00 < other._a00\n\t}\n\n\t/**\n\t * Bitwise OR\n\t * @method or\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.or = function (other) {\n\t\tthis._a00 |= other._a00\n\t\tthis._a16 |= other._a16\n\t\tthis._a32 |= other._a32\n\t\tthis._a48 |= other._a48\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise AND\n\t * @method and\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.and = function (other) {\n\t\tthis._a00 &= other._a00\n\t\tthis._a16 &= other._a16\n\t\tthis._a32 &= other._a32\n\t\tthis._a48 &= other._a48\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise XOR\n\t * @method xor\n\t * @param {Object} other UINT64\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.xor = function (other) {\n\t\tthis._a00 ^= other._a00\n\t\tthis._a16 ^= other._a16\n\t\tthis._a32 ^= other._a32\n\t\tthis._a48 ^= other._a48\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise NOT\n\t * @method not\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.not = function() {\n\t\tthis._a00 = ~this._a00 & 0xFFFF\n\t\tthis._a16 = ~this._a16 & 0xFFFF\n\t\tthis._a32 = ~this._a32 & 0xFFFF\n\t\tthis._a48 = ~this._a48 & 0xFFFF\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise shift right\n\t * @method shiftRight\n\t * @param {Number} number of bits to shift\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.shiftRight = UINT64.prototype.shiftr = function (n) {\n\t\tn %= 64\n\t\tif (n >= 48) {\n\t\t\tthis._a00 = this._a48 >> (n - 48)\n\t\t\tthis._a16 = 0\n\t\t\tthis._a32 = 0\n\t\t\tthis._a48 = 0\n\t\t} else if (n >= 32) {\n\t\t\tn -= 32\n\t\t\tthis._a00 = ( (this._a32 >> n) | (this._a48 << (16-n)) ) & 0xFFFF\n\t\t\tthis._a16 = (this._a48 >> n) & 0xFFFF\n\t\t\tthis._a32 = 0\n\t\t\tthis._a48 = 0\n\t\t} else if (n >= 16) {\n\t\t\tn -= 16\n\t\t\tthis._a00 = ( (this._a16 >> n) | (this._a32 << (16-n)) ) & 0xFFFF\n\t\t\tthis._a16 = ( (this._a32 >> n) | (this._a48 << (16-n)) ) & 0xFFFF\n\t\t\tthis._a32 = (this._a48 >> n) & 0xFFFF\n\t\t\tthis._a48 = 0\n\t\t} else {\n\t\t\tthis._a00 = ( (this._a00 >> n) | (this._a16 << (16-n)) ) & 0xFFFF\n\t\t\tthis._a16 = ( (this._a16 >> n) | (this._a32 << (16-n)) ) & 0xFFFF\n\t\t\tthis._a32 = ( (this._a32 >> n) | (this._a48 << (16-n)) ) & 0xFFFF\n\t\t\tthis._a48 = (this._a48 >> n) & 0xFFFF\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise shift left\n\t * @method shiftLeft\n\t * @param {Number} number of bits to shift\n\t * @param {Boolean} allow overflow\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.shiftLeft = UINT64.prototype.shiftl = function (n, allowOverflow) {\n\t\tn %= 64\n\t\tif (n >= 48) {\n\t\t\tthis._a48 = this._a00 << (n - 48)\n\t\t\tthis._a32 = 0\n\t\t\tthis._a16 = 0\n\t\t\tthis._a00 = 0\n\t\t} else if (n >= 32) {\n\t\t\tn -= 32\n\t\t\tthis._a48 = (this._a16 << n) | (this._a00 >> (16-n))\n\t\t\tthis._a32 = (this._a00 << n) & 0xFFFF\n\t\t\tthis._a16 = 0\n\t\t\tthis._a00 = 0\n\t\t} else if (n >= 16) {\n\t\t\tn -= 16\n\t\t\tthis._a48 = (this._a32 << n) | (this._a16 >> (16-n))\n\t\t\tthis._a32 = ( (this._a16 << n) | (this._a00 >> (16-n)) ) & 0xFFFF\n\t\t\tthis._a16 = (this._a00 << n) & 0xFFFF\n\t\t\tthis._a00 = 0\n\t\t} else {\n\t\t\tthis._a48 = (this._a48 << n) | (this._a32 >> (16-n))\n\t\t\tthis._a32 = ( (this._a32 << n) | (this._a16 >> (16-n)) ) & 0xFFFF\n\t\t\tthis._a16 = ( (this._a16 << n) | (this._a00 >> (16-n)) ) & 0xFFFF\n\t\t\tthis._a00 = (this._a00 << n) & 0xFFFF\n\t\t}\n\t\tif (!allowOverflow) {\n\t\t\tthis._a48 &= 0xFFFF\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise rotate left\n\t * @method rotl\n\t * @param {Number} number of bits to rotate\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.rotateLeft = UINT64.prototype.rotl = function (n) {\n\t\tn %= 64\n\t\tif (n == 0) return this\n\t\tif (n >= 32) {\n\t\t\t// A.B.C.D\n\t\t\t// B.C.D.A rotl(16)\n\t\t\t// C.D.A.B rotl(32)\n\t\t\tvar v = this._a00\n\t\t\tthis._a00 = this._a32\n\t\t\tthis._a32 = v\n\t\t\tv = this._a48\n\t\t\tthis._a48 = this._a16\n\t\t\tthis._a16 = v\n\t\t\tif (n == 32) return this\n\t\t\tn -= 32\n\t\t}\n\n\t\tvar high = (this._a48 << 16) | this._a32\n\t\tvar low = (this._a16 << 16) | this._a00\n\n\t\tvar _high = (high << n) | (low >>> (32 - n))\n\t\tvar _low = (low << n) | (high >>> (32 - n))\n\n\t\tthis._a00 = _low & 0xFFFF\n\t\tthis._a16 = _low >>> 16\n\t\tthis._a32 = _high & 0xFFFF\n\t\tthis._a48 = _high >>> 16\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Bitwise rotate right\n\t * @method rotr\n\t * @param {Number} number of bits to rotate\n\t * @return ThisExpression\n\t */\n\tUINT64.prototype.rotateRight = UINT64.prototype.rotr = function (n) {\n\t\tn %= 64\n\t\tif (n == 0) return this\n\t\tif (n >= 32) {\n\t\t\t// A.B.C.D\n\t\t\t// D.A.B.C rotr(16)\n\t\t\t// C.D.A.B rotr(32)\n\t\t\tvar v = this._a00\n\t\t\tthis._a00 = this._a32\n\t\t\tthis._a32 = v\n\t\t\tv = this._a48\n\t\t\tthis._a48 = this._a16\n\t\t\tthis._a16 = v\n\t\t\tif (n == 32) return this\n\t\t\tn -= 32\n\t\t}\n\n\t\tvar high = (this._a48 << 16) | this._a32\n\t\tvar low = (this._a16 << 16) | this._a00\n\n\t\tvar _high = (high >>> n) | (low << (32 - n))\n\t\tvar _low = (low >>> n) | (high << (32 - n))\n\n\t\tthis._a00 = _low & 0xFFFF\n\t\tthis._a16 = _low >>> 16\n\t\tthis._a32 = _high & 0xFFFF\n\t\tthis._a48 = _high >>> 16\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Clone the current _UINT64_\n\t * @method clone\n\t * @return {Object} cloned UINT64\n\t */\n\tUINT64.prototype.clone = function () {\n\t\treturn new UINT64(this._a00, this._a16, this._a32, this._a48)\n\t}\n\n\tif (typeof define != 'undefined' && define.amd) {\n\t\t// AMD / RequireJS\n\t\tdefine([], function () {\n\t\t\treturn UINT64\n\t\t})\n\t} else if (typeof module != 'undefined' && module.exports) {\n\t\t// Node.js\n\t\tmodule.exports = UINT64\n\t} else {\n\t\t// Browser\n\t\troot['UINT64'] = UINT64\n\t}\n\n})(this)\n","exports.UINT32 = require('./lib/uint32')\nexports.UINT64 = require('./lib/uint64')","/**\nxxHash implementation in pure Javascript\n\nCopyright (C) 2013, Pierre Curto\nMIT license\n*/\nvar UINT32 = require('cuint').UINT32\n\n/*\n\tMerged this sequence of method calls as it speeds up\n\tthe calculations by a factor of 2\n */\n// this.v1.add( other.multiply(PRIME32_2) ).rotl(13).multiply(PRIME32_1);\nUINT32.prototype.xxh_update = function (low, high) {\n\tvar b00 = PRIME32_2._low\n\tvar b16 = PRIME32_2._high\n\n\tvar c16, c00\n\tc00 = low * b00\n\tc16 = c00 >>> 16\n\n\tc16 += high * b00\n\tc16 &= 0xFFFF\t\t// Not required but improves performance\n\tc16 += low * b16\n\n\tvar a00 = this._low + (c00 & 0xFFFF)\n\tvar a16 = a00 >>> 16\n\n\ta16 += this._high + (c16 & 0xFFFF)\n\n\tvar v = (a16 << 16) | (a00 & 0xFFFF)\n\tv = (v << 13) | (v >>> 19)\n\n\ta00 = v & 0xFFFF\n\ta16 = v >>> 16\n\n\tb00 = PRIME32_1._low\n\tb16 = PRIME32_1._high\n\n\tc00 = a00 * b00\n\tc16 = c00 >>> 16\n\n\tc16 += a16 * b00\n\tc16 &= 0xFFFF\t\t// Not required but improves performance\n\tc16 += a00 * b16\n\n\tthis._low = c00 & 0xFFFF\n\tthis._high = c16 & 0xFFFF\n}\n\n/*\n * Constants\n */\nvar PRIME32_1 = UINT32( '2654435761' )\nvar PRIME32_2 = UINT32( '2246822519' )\nvar PRIME32_3 = UINT32( '3266489917' )\nvar PRIME32_4 = UINT32(  '668265263' )\nvar PRIME32_5 = UINT32(  '374761393' )\n\n/**\n* Convert string to proper UTF-8 array\n* @param str Input string\n* @returns {Uint8Array} UTF8 array is returned as uint8 array\n*/\nfunction toUTF8Array (str) {\n\tvar utf8 = []\n\tfor (var i=0, n=str.length; i < n; i++) {\n\t\tvar charcode = str.charCodeAt(i)\n\t\tif (charcode < 0x80) utf8.push(charcode)\n\t\telse if (charcode < 0x800) {\n\t\t\tutf8.push(0xc0 | (charcode >> 6),\n\t\t\t0x80 | (charcode & 0x3f))\n\t\t}\n\t\telse if (charcode < 0xd800 || charcode >= 0xe000) {\n\t\t\tutf8.push(0xe0 | (charcode >> 12),\n\t\t\t0x80 | ((charcode>>6) & 0x3f),\n\t\t\t0x80 | (charcode & 0x3f))\n\t\t}\n\t\t// surrogate pair\n\t\telse {\n\t\t\ti++;\n\t\t\t// UTF-16 encodes 0x10000-0x10FFFF by\n\t\t\t// subtracting 0x10000 and splitting the\n\t\t\t// 20 bits of 0x0-0xFFFFF into two halves\n\t\t\tcharcode = 0x10000 + (((charcode & 0x3ff)<<10)\n\t\t\t| (str.charCodeAt(i) & 0x3ff))\n\t\t\tutf8.push(0xf0 | (charcode >>18),\n\t\t\t0x80 | ((charcode>>12) & 0x3f),\n\t\t\t0x80 | ((charcode>>6) & 0x3f),\n\t\t\t0x80 | (charcode & 0x3f))\n\t\t}\n\t}\n\n\treturn new Uint8Array(utf8)\n}\n\n/**\n * XXH object used as a constructor or a function\n * @constructor\n * or\n * @param {Object|String} input data\n * @param {Number|UINT32} seed\n * @return ThisExpression\n * or\n * @return {UINT32} xxHash\n */\nfunction XXH () {\n\tif (arguments.length == 2)\n\t\treturn new XXH( arguments[1] ).update( arguments[0] ).digest()\n\n\tif (!(this instanceof XXH))\n\t\treturn new XXH( arguments[0] )\n\n\tinit.call(this, arguments[0])\n}\n\n/**\n * Initialize the XXH instance with the given seed\n * @method init\n * @param {Number|Object} seed as a number or an unsigned 32 bits integer\n * @return ThisExpression\n */\n function init (seed) {\n\tthis.seed = seed instanceof UINT32 ? seed.clone() : UINT32(seed)\n\tthis.v1 = this.seed.clone().add(PRIME32_1).add(PRIME32_2)\n\tthis.v2 = this.seed.clone().add(PRIME32_2)\n\tthis.v3 = this.seed.clone()\n\tthis.v4 = this.seed.clone().subtract(PRIME32_1)\n\tthis.total_len = 0\n\tthis.memsize = 0\n\tthis.memory = null\n\n\treturn this\n}\nXXH.prototype.init = init\n\n/**\n * Add data to be computed for the XXH hash\n * @method update\n * @param {String|Buffer|ArrayBuffer} input as a string or nodejs Buffer or ArrayBuffer\n * @return ThisExpression\n */\nXXH.prototype.update = function (input) {\n\tvar isString = typeof input == 'string'\n\tvar isArrayBuffer\n\n\t// Convert all strings to utf-8 first (issue #5)\n\tif (isString) {\n\t\tinput = toUTF8Array(input)\n\t\tisString = false\n\t\tisArrayBuffer = true\n\t}\n\n\tif (typeof ArrayBuffer !== \"undefined\" && input instanceof ArrayBuffer)\n\t{\n\t\tisArrayBuffer = true\n\t\tinput = new Uint8Array(input);\n\t}\n\n\tvar p = 0\n\tvar len = input.length\n\tvar bEnd = p + len\n\n\tif (len == 0) return this\n\n\tthis.total_len += len\n\n\tif (this.memsize == 0)\n\t{\n\t\tif (isString) {\n\t\t\tthis.memory = ''\n\t\t} else if (isArrayBuffer) {\n\t\t\tthis.memory = new Uint8Array(16)\n\t\t} else {\n\t\t\tthis.memory = new Buffer(16)\n\t\t}\n\t}\n\n\tif (this.memsize + len < 16)   // fill in tmp buffer\n\t{\n\t\t// XXH_memcpy(this.memory + this.memsize, input, len)\n\t\tif (isString) {\n\t\t\tthis.memory += input\n\t\t} else if (isArrayBuffer) {\n\t\t\tthis.memory.set( input.subarray(0, len), this.memsize )\n\t\t} else {\n\t\t\tinput.copy( this.memory, this.memsize, 0, len )\n\t\t}\n\n\t\tthis.memsize += len\n\t\treturn this\n\t}\n\n\tif (this.memsize > 0)   // some data left from previous update\n\t{\n\t\t// XXH_memcpy(this.memory + this.memsize, input, 16-this.memsize);\n\t\tif (isString) {\n\t\t\tthis.memory += input.slice(0, 16 - this.memsize)\n\t\t} else if (isArrayBuffer) {\n\t\t\tthis.memory.set( input.subarray(0, 16 - this.memsize), this.memsize )\n\t\t} else {\n\t\t\tinput.copy( this.memory, this.memsize, 0, 16 - this.memsize )\n\t\t}\n\n\t\tvar p32 = 0\n\t\tif (isString) {\n\t\t\tthis.v1.xxh_update(\n\t\t\t\t(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)\n\t\t\t,\t(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)\n\t\t\t)\n\t\t\tp32 += 4\n\t\t\tthis.v2.xxh_update(\n\t\t\t\t(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)\n\t\t\t,\t(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)\n\t\t\t)\n\t\t\tp32 += 4\n\t\t\tthis.v3.xxh_update(\n\t\t\t\t(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)\n\t\t\t,\t(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)\n\t\t\t)\n\t\t\tp32 += 4\n\t\t\tthis.v4.xxh_update(\n\t\t\t\t(this.memory.charCodeAt(p32+1) << 8) | this.memory.charCodeAt(p32)\n\t\t\t,\t(this.memory.charCodeAt(p32+3) << 8) | this.memory.charCodeAt(p32+2)\n\t\t\t)\n\t\t} else {\n\t\t\tthis.v1.xxh_update(\n\t\t\t\t(this.memory[p32+1] << 8) | this.memory[p32]\n\t\t\t,\t(this.memory[p32+3] << 8) | this.memory[p32+2]\n\t\t\t)\n\t\t\tp32 += 4\n\t\t\tthis.v2.xxh_update(\n\t\t\t\t(this.memory[p32+1] << 8) | this.memory[p32]\n\t\t\t,\t(this.memory[p32+3] << 8) | this.memory[p32+2]\n\t\t\t)\n\t\t\tp32 += 4\n\t\t\tthis.v3.xxh_update(\n\t\t\t\t(this.memory[p32+1] << 8) | this.memory[p32]\n\t\t\t,\t(this.memory[p32+3] << 8) | this.memory[p32+2]\n\t\t\t)\n\t\t\tp32 += 4\n\t\t\tthis.v4.xxh_update(\n\t\t\t\t(this.memory[p32+1] << 8) | this.memory[p32]\n\t\t\t,\t(this.memory[p32+3] << 8) | this.memory[p32+2]\n\t\t\t)\n\t\t}\n\n\t\tp += 16 - this.memsize\n\t\tthis.memsize = 0\n\t\tif (isString) this.memory = ''\n\t}\n\n\tif (p <= bEnd - 16)\n\t{\n\t\tvar limit = bEnd - 16\n\n\t\tdo\n\t\t{\n\t\t\tif (isString) {\n\t\t\t\tthis.v1.xxh_update(\n\t\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t\t)\n\t\t\t\tp += 4\n\t\t\t\tthis.v2.xxh_update(\n\t\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t\t)\n\t\t\t\tp += 4\n\t\t\t\tthis.v3.xxh_update(\n\t\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t\t)\n\t\t\t\tp += 4\n\t\t\t\tthis.v4.xxh_update(\n\t\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tthis.v1.xxh_update(\n\t\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t\t)\n\t\t\t\tp += 4\n\t\t\t\tthis.v2.xxh_update(\n\t\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t\t)\n\t\t\t\tp += 4\n\t\t\t\tthis.v3.xxh_update(\n\t\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t\t)\n\t\t\t\tp += 4\n\t\t\t\tthis.v4.xxh_update(\n\t\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t\t)\n\t\t\t}\n\t\t\tp += 4\n\t\t} while (p <= limit)\n\t}\n\n\tif (p < bEnd)\n\t{\n\t\t// XXH_memcpy(this.memory, p, bEnd-p);\n\t\tif (isString) {\n\t\t\tthis.memory += input.slice(p)\n\t\t} else if (isArrayBuffer) {\n\t\t\tthis.memory.set( input.subarray(p, bEnd), this.memsize )\n\t\t} else {\n\t\t\tinput.copy( this.memory, this.memsize, p, bEnd )\n\t\t}\n\n\t\tthis.memsize = bEnd - p\n\t}\n\n\treturn this\n}\n\n/**\n * Finalize the XXH computation. The XXH instance is ready for reuse for the given seed\n * @method digest\n * @return {UINT32} xxHash\n */\nXXH.prototype.digest = function () {\n\tvar input = this.memory\n\tvar isString = typeof input == 'string'\n\tvar p = 0\n\tvar bEnd = this.memsize\n\tvar h32, h\n\tvar u = new UINT32\n\n\tif (this.total_len >= 16)\n\t{\n\t\th32 = this.v1.rotl(1).add( this.v2.rotl(7).add( this.v3.rotl(12).add( this.v4.rotl(18) ) ) )\n\t}\n\telse\n\t{\n\t\th32  = this.seed.clone().add( PRIME32_5 )\n\t}\n\n\th32.add( u.fromNumber(this.total_len) )\n\n\twhile (p <= bEnd - 4)\n\t{\n\t\tif (isString) {\n\t\t\tu.fromBits(\n\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t)\n\t\t} else {\n\t\t\tu.fromBits(\n\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t)\n\t\t}\n\t\th32\n\t\t\t.add( u.multiply(PRIME32_3) )\n\t\t\t.rotl(17)\n\t\t\t.multiply( PRIME32_4 )\n\t\tp += 4\n\t}\n\n\twhile (p < bEnd)\n\t{\n\t\tu.fromBits( isString ? input.charCodeAt(p++) : input[p++], 0 )\n\t\th32\n\t\t\t.add( u.multiply(PRIME32_5) )\n\t\t\t.rotl(11)\n\t\t\t.multiply(PRIME32_1)\n\t}\n\n\th = h32.clone().shiftRight(15)\n\th32.xor(h).multiply(PRIME32_2)\n\n\th = h32.clone().shiftRight(13)\n\th32.xor(h).multiply(PRIME32_3)\n\n\th = h32.clone().shiftRight(16)\n\th32.xor(h)\n\n\t// Reset the state\n\tthis.init( this.seed )\n\n\treturn h32\n}\n\nmodule.exports = XXH\n","/**\nxxHash64 implementation in pure Javascript\n\nCopyright (C) 2016, Pierre Curto\nMIT license\n*/\nvar UINT64 = require('cuint').UINT64\n\n/*\n * Constants\n */\nvar PRIME64_1 = UINT64( '11400714785074694791' )\nvar PRIME64_2 = UINT64( '14029467366897019727' )\nvar PRIME64_3 = UINT64(  '1609587929392839161' )\nvar PRIME64_4 = UINT64(  '9650029242287828579' )\nvar PRIME64_5 = UINT64(  '2870177450012600261' )\n\n/**\n* Convert string to proper UTF-8 array\n* @param str Input string\n* @returns {Uint8Array} UTF8 array is returned as uint8 array\n*/\nfunction toUTF8Array (str) {\n\tvar utf8 = []\n\tfor (var i=0, n=str.length; i < n; i++) {\n\t\tvar charcode = str.charCodeAt(i)\n\t\tif (charcode < 0x80) utf8.push(charcode)\n\t\telse if (charcode < 0x800) {\n\t\t\tutf8.push(0xc0 | (charcode >> 6),\n\t\t\t0x80 | (charcode & 0x3f))\n\t\t}\n\t\telse if (charcode < 0xd800 || charcode >= 0xe000) {\n\t\t\tutf8.push(0xe0 | (charcode >> 12),\n\t\t\t0x80 | ((charcode>>6) & 0x3f),\n\t\t\t0x80 | (charcode & 0x3f))\n\t\t}\n\t\t// surrogate pair\n\t\telse {\n\t\t\ti++;\n\t\t\t// UTF-16 encodes 0x10000-0x10FFFF by\n\t\t\t// subtracting 0x10000 and splitting the\n\t\t\t// 20 bits of 0x0-0xFFFFF into two halves\n\t\t\tcharcode = 0x10000 + (((charcode & 0x3ff)<<10)\n\t\t\t| (str.charCodeAt(i) & 0x3ff))\n\t\t\tutf8.push(0xf0 | (charcode >>18),\n\t\t\t0x80 | ((charcode>>12) & 0x3f),\n\t\t\t0x80 | ((charcode>>6) & 0x3f),\n\t\t\t0x80 | (charcode & 0x3f))\n\t\t}\n\t}\n\n\treturn new Uint8Array(utf8)\n}\n\n/**\n * XXH64 object used as a constructor or a function\n * @constructor\n * or\n * @param {Object|String} input data\n * @param {Number|UINT64} seed\n * @return ThisExpression\n * or\n * @return {UINT64} xxHash\n */\nfunction XXH64 () {\n\tif (arguments.length == 2)\n\t\treturn new XXH64( arguments[1] ).update( arguments[0] ).digest()\n\n\tif (!(this instanceof XXH64))\n\t\treturn new XXH64( arguments[0] )\n\n\tinit.call(this, arguments[0])\n}\n\n/**\n * Initialize the XXH64 instance with the given seed\n * @method init\n * @param {Number|Object} seed as a number or an unsigned 32 bits integer\n * @return ThisExpression\n */\n function init (seed) {\n\tthis.seed = seed instanceof UINT64 ? seed.clone() : UINT64(seed)\n\tthis.v1 = this.seed.clone().add(PRIME64_1).add(PRIME64_2)\n\tthis.v2 = this.seed.clone().add(PRIME64_2)\n\tthis.v3 = this.seed.clone()\n\tthis.v4 = this.seed.clone().subtract(PRIME64_1)\n\tthis.total_len = 0\n\tthis.memsize = 0\n\tthis.memory = null\n\n\treturn this\n}\nXXH64.prototype.init = init\n\n/**\n * Add data to be computed for the XXH64 hash\n * @method update\n * @param {String|Buffer|ArrayBuffer} input as a string or nodejs Buffer or ArrayBuffer\n * @return ThisExpression\n */\nXXH64.prototype.update = function (input) {\n\tvar isString = typeof input == 'string'\n\tvar isArrayBuffer\n\n\t// Convert all strings to utf-8 first (issue #5)\n\tif (isString) {\n\t\tinput = toUTF8Array(input)\n\t\tisString = false\n\t\tisArrayBuffer = true\n\t}\n\n\tif (typeof ArrayBuffer !== \"undefined\" && input instanceof ArrayBuffer)\n\t{\n\t\tisArrayBuffer = true\n\t\tinput = new Uint8Array(input);\n\t}\n\n\tvar p = 0\n\tvar len = input.length\n\tvar bEnd = p + len\n\n\tif (len == 0) return this\n\n\tthis.total_len += len\n\n\tif (this.memsize == 0)\n\t{\n\t\tif (isString) {\n\t\t\tthis.memory = ''\n\t\t} else if (isArrayBuffer) {\n\t\t\tthis.memory = new Uint8Array(32)\n\t\t} else {\n\t\t\tthis.memory = new Buffer(32)\n\t\t}\n\t}\n\n\tif (this.memsize + len < 32)   // fill in tmp buffer\n\t{\n\t\t// XXH64_memcpy(this.memory + this.memsize, input, len)\n\t\tif (isString) {\n\t\t\tthis.memory += input\n\t\t} else if (isArrayBuffer) {\n\t\t\tthis.memory.set( input.subarray(0, len), this.memsize )\n\t\t} else {\n\t\t\tinput.copy( this.memory, this.memsize, 0, len )\n\t\t}\n\n\t\tthis.memsize += len\n\t\treturn this\n\t}\n\n\tif (this.memsize > 0)   // some data left from previous update\n\t{\n\t\t// XXH64_memcpy(this.memory + this.memsize, input, 16-this.memsize);\n\t\tif (isString) {\n\t\t\tthis.memory += input.slice(0, 32 - this.memsize)\n\t\t} else if (isArrayBuffer) {\n\t\t\tthis.memory.set( input.subarray(0, 32 - this.memsize), this.memsize )\n\t\t} else {\n\t\t\tinput.copy( this.memory, this.memsize, 0, 32 - this.memsize )\n\t\t}\n\n\t\tvar p64 = 0\n\t\tif (isString) {\n\t\t\tvar other\n\t\t\tother = UINT64(\n\t\t\t\t\t(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)\n\t\t\t\t)\n\t\t\tthis.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\tp64 += 8\n\t\t\tother = UINT64(\n\t\t\t\t\t(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)\n\t\t\t\t)\n\t\t\tthis.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\tp64 += 8\n\t\t\tother = UINT64(\n\t\t\t\t\t(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)\n\t\t\t\t)\n\t\t\tthis.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\tp64 += 8\n\t\t\tother = UINT64(\n\t\t\t\t\t(this.memory.charCodeAt(p64+1) << 8) | this.memory.charCodeAt(p64)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+3) << 8) | this.memory.charCodeAt(p64+2)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+5) << 8) | this.memory.charCodeAt(p64+4)\n\t\t\t\t,\t(this.memory.charCodeAt(p64+7) << 8) | this.memory.charCodeAt(p64+6)\n\t\t\t\t)\n\t\t\tthis.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t} else {\n\t\t\tvar other\n\t\t\tother = UINT64(\n\t\t\t\t\t(this.memory[p64+1] << 8) | this.memory[p64]\n\t\t\t\t,\t(this.memory[p64+3] << 8) | this.memory[p64+2]\n\t\t\t\t,\t(this.memory[p64+5] << 8) | this.memory[p64+4]\n\t\t\t\t,\t(this.memory[p64+7] << 8) | this.memory[p64+6]\n\t\t\t\t)\n\t\t\tthis.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\tp64 += 8\n\t\t\tother = UINT64(\n\t\t\t\t\t(this.memory[p64+1] << 8) | this.memory[p64]\n\t\t\t\t,\t(this.memory[p64+3] << 8) | this.memory[p64+2]\n\t\t\t\t,\t(this.memory[p64+5] << 8) | this.memory[p64+4]\n\t\t\t\t,\t(this.memory[p64+7] << 8) | this.memory[p64+6]\n\t\t\t\t)\n\t\t\tthis.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\tp64 += 8\n\t\t\tother = UINT64(\n\t\t\t\t\t(this.memory[p64+1] << 8) | this.memory[p64]\n\t\t\t\t,\t(this.memory[p64+3] << 8) | this.memory[p64+2]\n\t\t\t\t,\t(this.memory[p64+5] << 8) | this.memory[p64+4]\n\t\t\t\t,\t(this.memory[p64+7] << 8) | this.memory[p64+6]\n\t\t\t\t)\n\t\t\tthis.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\tp64 += 8\n\t\t\tother = UINT64(\n\t\t\t\t\t(this.memory[p64+1] << 8) | this.memory[p64]\n\t\t\t\t,\t(this.memory[p64+3] << 8) | this.memory[p64+2]\n\t\t\t\t,\t(this.memory[p64+5] << 8) | this.memory[p64+4]\n\t\t\t\t,\t(this.memory[p64+7] << 8) | this.memory[p64+6]\n\t\t\t\t)\n\t\t\tthis.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t}\n\n\t\tp += 32 - this.memsize\n\t\tthis.memsize = 0\n\t\tif (isString) this.memory = ''\n\t}\n\n\tif (p <= bEnd - 32)\n\t{\n\t\tvar limit = bEnd - 32\n\n\t\tdo\n\t\t{\n\t\t\tif (isString) {\n\t\t\t\tvar other\n\t\t\t\tother = UINT64(\n\t\t\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t\t\t,\t(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)\n\t\t\t\t\t,\t(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)\n\t\t\t\t\t)\n\t\t\t\tthis.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\t\tp += 8\n\t\t\t\tother = UINT64(\n\t\t\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t\t\t,\t(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)\n\t\t\t\t\t,\t(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)\n\t\t\t\t\t)\n\t\t\t\tthis.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\t\tp += 8\n\t\t\t\tother = UINT64(\n\t\t\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t\t\t,\t(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)\n\t\t\t\t\t,\t(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)\n\t\t\t\t\t)\n\t\t\t\tthis.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\t\tp += 8\n\t\t\t\tother = UINT64(\n\t\t\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t\t\t,\t(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)\n\t\t\t\t\t,\t(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)\n\t\t\t\t\t)\n\t\t\t\tthis.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\t} else {\n\t\t\t\tvar other\n\t\t\t\tother = UINT64(\n\t\t\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t\t\t,\t(input[p+5] << 8) | input[p+4]\n\t\t\t\t\t,\t(input[p+7] << 8) | input[p+6]\n\t\t\t\t\t)\n\t\t\t\tthis.v1.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\t\tp += 8\n\t\t\t\tother = UINT64(\n\t\t\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t\t\t,\t(input[p+5] << 8) | input[p+4]\n\t\t\t\t\t,\t(input[p+7] << 8) | input[p+6]\n\t\t\t\t\t)\n\t\t\t\tthis.v2.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\t\tp += 8\n\t\t\t\tother = UINT64(\n\t\t\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t\t\t,\t(input[p+5] << 8) | input[p+4]\n\t\t\t\t\t,\t(input[p+7] << 8) | input[p+6]\n\t\t\t\t\t)\n\t\t\t\tthis.v3.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\t\tp += 8\n\t\t\t\tother = UINT64(\n\t\t\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t\t\t,\t(input[p+5] << 8) | input[p+4]\n\t\t\t\t\t,\t(input[p+7] << 8) | input[p+6]\n\t\t\t\t\t)\n\t\t\t\tthis.v4.add( other.multiply(PRIME64_2) ).rotl(31).multiply(PRIME64_1);\n\t\t\t}\n\t\t\tp += 8\n\t\t} while (p <= limit)\n\t}\n\n\tif (p < bEnd)\n\t{\n\t\t// XXH64_memcpy(this.memory, p, bEnd-p);\n\t\tif (isString) {\n\t\t\tthis.memory += input.slice(p)\n\t\t} else if (isArrayBuffer) {\n\t\t\tthis.memory.set( input.subarray(p, bEnd), this.memsize )\n\t\t} else {\n\t\t\tinput.copy( this.memory, this.memsize, p, bEnd )\n\t\t}\n\n\t\tthis.memsize = bEnd - p\n\t}\n\n\treturn this\n}\n\n/**\n * Finalize the XXH64 computation. The XXH64 instance is ready for reuse for the given seed\n * @method digest\n * @return {UINT64} xxHash\n */\nXXH64.prototype.digest = function () {\n\tvar input = this.memory\n\tvar isString = typeof input == 'string'\n\tvar p = 0\n\tvar bEnd = this.memsize\n\tvar h64, h\n\tvar u = new UINT64\n\n\tif (this.total_len >= 32)\n\t{\n\t\th64 = this.v1.clone().rotl(1)\n\t\th64.add( this.v2.clone().rotl(7) )\n\t\th64.add( this.v3.clone().rotl(12) )\n\t\th64.add( this.v4.clone().rotl(18) )\n\n\t\th64.xor( this.v1.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) )\n\t\th64.multiply(PRIME64_1).add(PRIME64_4)\n\n\t\th64.xor( this.v2.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) )\n\t\th64.multiply(PRIME64_1).add(PRIME64_4)\n\n\t\th64.xor( this.v3.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) )\n\t\th64.multiply(PRIME64_1).add(PRIME64_4)\n\n\t\th64.xor( this.v4.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1) )\n\t\th64.multiply(PRIME64_1).add(PRIME64_4)\n\t}\n\telse\n\t{\n\t\th64  = this.seed.clone().add( PRIME64_5 )\n\t}\n\n\th64.add( u.fromNumber(this.total_len) )\n\n\twhile (p <= bEnd - 8)\n\t{\n\t\tif (isString) {\n\t\t\tu.fromBits(\n\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t,\t(input.charCodeAt(p+5) << 8) | input.charCodeAt(p+4)\n\t\t\t,\t(input.charCodeAt(p+7) << 8) | input.charCodeAt(p+6)\n\t\t\t)\n\t\t} else {\n\t\t\tu.fromBits(\n\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t,\t(input[p+5] << 8) | input[p+4]\n\t\t\t,\t(input[p+7] << 8) | input[p+6]\n\t\t\t)\n\t\t}\n\t\tu.multiply(PRIME64_2).rotl(31).multiply(PRIME64_1)\n\t\th64\n\t\t\t.xor(u)\n\t\t\t.rotl(27)\n\t\t\t.multiply( PRIME64_1 )\n\t\t\t.add( PRIME64_4 )\n\t\tp += 8\n\t}\n\n\tif (p + 4 <= bEnd) {\n\t\tif (isString) {\n\t\t\tu.fromBits(\n\t\t\t\t(input.charCodeAt(p+1) << 8) | input.charCodeAt(p)\n\t\t\t,\t(input.charCodeAt(p+3) << 8) | input.charCodeAt(p+2)\n\t\t\t,\t0\n\t\t\t,\t0\n\t\t\t)\n\t\t} else {\n\t\t\tu.fromBits(\n\t\t\t\t(input[p+1] << 8) | input[p]\n\t\t\t,\t(input[p+3] << 8) | input[p+2]\n\t\t\t,\t0\n\t\t\t,\t0\n\t\t\t)\n\t\t}\n\t\th64\n\t\t\t.xor( u.multiply(PRIME64_1) )\n\t\t\t.rotl(23)\n\t\t\t.multiply( PRIME64_2 )\n\t\t\t.add( PRIME64_3 )\n\t\tp += 4\n\t}\n\n\twhile (p < bEnd)\n\t{\n\t\tu.fromBits( isString ? input.charCodeAt(p++) : input[p++], 0, 0, 0 )\n\t\th64\n\t\t\t.xor( u.multiply(PRIME64_5) )\n\t\t\t.rotl(11)\n\t\t\t.multiply(PRIME64_1)\n\t}\n\n\th = h64.clone().shiftRight(33)\n\th64.xor(h).multiply(PRIME64_2)\n\n\th = h64.clone().shiftRight(29)\n\th64.xor(h).multiply(PRIME64_3)\n\n\th = h64.clone().shiftRight(32)\n\th64.xor(h)\n\n\t// Reset the state\n\tthis.init( this.seed )\n\n\treturn h64\n}\n\nmodule.exports = XXH64\n","module.exports = {\n\th32: require(\"./xxhash\")\n,\th64: require(\"./xxhash64\")\n}\n","'use strict';\n\nmodule.exports = function (data, opts) {\n    if (!opts) opts = {};\n    if (typeof opts === 'function') opts = { cmp: opts };\n    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;\n\n    var cmp = opts.cmp && (function (f) {\n        return function (node) {\n            return function (a, b) {\n                var aobj = { key: a, value: node[a] };\n                var bobj = { key: b, value: node[b] };\n                return f(aobj, bobj);\n            };\n        };\n    })(opts.cmp);\n\n    var seen = [];\n    return (function stringify (node) {\n        if (node && node.toJSON && typeof node.toJSON === 'function') {\n            node = node.toJSON();\n        }\n\n        if (node === undefined) return;\n        if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';\n        if (typeof node !== 'object') return JSON.stringify(node);\n\n        var i, out;\n        if (Array.isArray(node)) {\n            out = '[';\n            for (i = 0; i < node.length; i++) {\n                if (i) out += ',';\n                out += stringify(node[i]) || 'null';\n            }\n            return out + ']';\n        }\n\n        if (node === null) return 'null';\n\n        if (seen.indexOf(node) !== -1) {\n            if (cycles) return JSON.stringify('__cycle__');\n            throw new TypeError('Converting circular structure to JSON');\n        }\n\n        var seenIndex = seen.push(node) - 1;\n        var keys = Object.keys(node).sort(cmp && cmp(node));\n        out = '';\n        for (i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            var value = stringify(node[key]);\n\n            if (!value) continue;\n            if (out) out += ',';\n            out += JSON.stringify(key) + ':' + value;\n        }\n        seen.splice(seenIndex, 1);\n        return '{' + out + '}';\n    })(data);\n};\n","import XXHash from \"xxhashjs\";\nimport stringify from \"fast-json-stable-stringify\";\n\nexport function dopeHash(value: unknown) {\n  switch (typeof value) {\n    case \"number\":\n      return `n${value}`;\n    case \"string\":\n      return `s${value}`;\n    case \"boolean\":\n      return `b${value}`;\n    case \"undefined\":\n      return \"u\";\n    case \"function\":\n      return `f${value.toString().replace(/\\s+/g, \"\")}`;\n    case \"symbol\":\n      return `y${value.toString()}`;\n    case \"object\": {\n      const stringified = stringify(value);\n      return XXHash.h32(stringified, 0xdeadbeef).toString(16);\n    }\n  }\n\n  return \"unknown\";\n}\n","import { dopeHash } from \"./dopeHash.js\";\nimport {\n  HashedKey,\n  MapEntry,\n  HashFunction,\n  DopeMapConfig,\n  DopeKey,\n} from \"./types.js\";\n\nexport default class DopeMap<V> {\n  private dopeMap: Map<HashedKey, MapEntry<V>>;\n  private hashKeyMap: Map<DopeKey, HashedKey>;\n\n  private hashFunction: HashFunction = dopeHash;\n\n  constructor(entries?: Iterable<[DopeKey, V]> | null, config?: DopeMapConfig) {\n    this.handleConfig(config);\n    this.dopeMap = new Map();\n    this.hashKeyMap = new Map();\n\n    if (entries) {\n      for (const [key, value] of entries) {\n        this.set(key, value);\n      }\n    }\n  }\n\n  private handleConfig(config?: DopeMapConfig) {\n    if (config?.hashFunction) {\n      if (typeof config.hashFunction !== \"function\") {\n        throw new Error(\n          \"[DOPE] Provided hashFunction must be a function.  Not dope!\"\n        );\n      }\n\n      this.hashFunction = config.hashFunction;\n    }\n  }\n\n  private getHashedKey(key: DopeKey) {\n    if (this.hashKeyMap.has(key)) {\n      return this.hashKeyMap.get(key) as HashedKey;\n    }\n\n    return this.hashFunction(key);\n  }\n\n  set(k: DopeKey, v: V) {\n    const hashedKey = this.getHashedKey(k);\n    this.hashKeyMap.set(k, hashedKey);\n    return this.dopeMap.set(hashedKey, { k, v });\n  }\n\n  get(k: DopeKey) {\n    const hashedKey = this.getHashedKey(k);\n    const entry = this.dopeMap.get(hashedKey);\n    return entry?.v;\n  }\n\n  has(k: DopeKey) {\n    const hashedKey = this.getHashedKey(k);\n    return this.dopeMap.has(hashedKey);\n  }\n\n  delete(k: DopeKey) {\n    const hashedKey = this.getHashedKey(k);\n    return this.dopeMap.delete(hashedKey);\n  }\n\n  /**\n   * Returns Dope Map's current size\n   */\n  get size() {\n    return this.dopeMap.size;\n  }\n\n  /**\n   * Returns size of dope map plus its internal hash map\n   */\n  getTotalSize() {\n    return this.dopeMap.size + this.hashKeyMap.size;\n  }\n\n  /**\n   * Returns an object in a hashedKey: value shape.\n   */\n  getMap() {\n    return Object.fromEntries(this.dopeMap.entries());\n  }\n\n  clear() {\n    this.hashKeyMap.clear();\n    return this.dopeMap.clear();\n  }\n\n  entries(asArray: true): [DopeKey, V][];\n  entries(asArray?: false): IterableIterator<[DopeKey, V]>;\n  entries(asArray?: boolean): [DopeKey, V][] | IterableIterator<[DopeKey, V]> {\n    const iterator = (function* (map: Map<HashedKey, MapEntry<V>>) {\n      for (const { k, v } of map.values()) {\n        yield [k, v] as [DopeKey, V];\n      }\n    })(this.dopeMap);\n\n    return asArray ? Array.from(iterator) : iterator;\n  }\n\n  forEach(callback: (value: V, key: DopeKey, map: this) => void): void {\n    for (const { k, v } of this.dopeMap.values()) {\n      callback(v, k, this);\n    }\n  }\n\n  keys(asArray: true): DopeKey[];\n  keys(asArray?: false): IterableIterator<DopeKey>;\n  keys(asArray?: boolean): DopeKey[] | IterableIterator<DopeKey> {\n    const iterator = (function* (map: Map<HashedKey, MapEntry<V>>) {\n      for (const { k } of map.values()) {\n        yield k;\n      }\n    })(this.dopeMap);\n\n    return asArray ? Array.from(iterator) : iterator;\n  }\n\n  values(asArray: true): V[];\n  values(asArray?: false): IterableIterator<V>;\n  values(asArray?: boolean): V[] | IterableIterator<V> {\n    const iterator = (function* (map: Map<HashedKey, MapEntry<V>>) {\n      for (const { v } of map.values()) {\n        yield v;\n      }\n    })(this.dopeMap);\n\n    return asArray ? Array.from(iterator) : iterator;\n  }\n}\n"],"names":["root","UINT32","l","h","this","_low","_high","remainder","fromNumber","call","fromString","fromBits","value","s","radix","parseInt","Math","pow","prototype","toNumber","toString","add","other","a00","a16","subtract","clone","negate","multiply","c16","c00","b16","b00","div","Error","gt","eq","_other","i","lt","shiftLeft","shiftRight","v","equals","greaterThan","lessThan","or","and","not","xor","shiftr","n","shiftl","allowOverflow","rotateLeft","rotl","rotateRight","rotr","module","exports","radixPowerCache","UINT64","radixCache","a32","a48","apply","arguments","_a00","_a16","_a32","_a48","radixUint","len","length","size","min","slice","self","res","Array","join","b32","c32","c48","high","low","cuint","require$$0","require$$1","xxh_update","PRIME32_2","PRIME32_1","PRIME32_3","PRIME32_4","PRIME32_5","XXH","update","digest","init","seed","v1","v2","v3","v4","total_len","memsize","memory","input","isArrayBuffer","isString","str","utf8","charcode","charCodeAt","push","Uint8Array","toUTF8Array","ArrayBuffer","p","bEnd","Buffer","set","subarray","copy","p32","limit","h32","u","xxhash","PRIME64_1","PRIME64_2","PRIME64_3","PRIME64_4","PRIME64_5","XXH64","p64","h64","xxhash64","lib","fastJsonStableStringify","data","opts","cmp","f","cycles","node","a","b","aobj","key","bobj","seen","stringify","toJSON","undefined","isFinite","JSON","out","isArray","indexOf","TypeError","seenIndex","keys","Object","sort","splice","dopeHash","replace","stringified","XXHash","dopeMap","hashKeyMap","hashFunction","constructor","entries","config","handleConfig","Map","getHashedKey","has","get","k","hashedKey","entry","delete","getTotalSize","getMap","fromEntries","clear","asArray","iterator","map","values","from","forEach","callback"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}